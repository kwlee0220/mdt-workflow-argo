plugins {
	id 'java'
	id 'application'
	id 'eclipse'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'etri'
version = '1.0.0'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}
	
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://maven.aksw.org/repository/internal/"
		allowInsecureProtocol = true
	}
}
dependencies {
	implementation project(":utils")
	implementation project(":mdt-client")
	implementation project(":argo-java-client")

	// Guava (from the project :utils)
	implementation "com.google.guava:guava:${guava_version}"
	
	// Checker framework
	implementation("org.checkerframework:checker:${checker_version}")

	// Lombok (from the project :utils)
	compileOnly "org.projectlombok:lombok:${lombok_version}"
	annotationProcessor "org.projectlombok:lombok:${lombok_version}"

	// logback with SLF4j (from the project :utils)
	implementation "ch.qos.logback:logback-classic:${logback_version}"
	
	// HTTP Client
	implementation "com.squareup.okhttp3:okhttp:${okhttp_version}"
	
	// jackson 
	implementation "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
	 implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"

	// Spring boot
	implementation "org.springframework.boot:spring-boot-starter-web:${spring_boot_version}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0"
	implementation "org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}"
	
	// Hibernate
	implementation "org.hibernate.orm:hibernate-core:${hibernate_version}"
	implementation "com.zaxxer:HikariCP:${hikaricp_version}"

	// H2
	implementation "com.h2database:h2:${h2_version}"
}
configurations {
	all {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
}

task sourceJar(type: Jar) {
	from sourceSets.main.allSource
}

test {
	useJUnitPlatform()
}

bootJar {
	archiveClassifier = 'all'
	mainClass = 'mdt.workflow.MDTWorkflowManagerApplication'
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}